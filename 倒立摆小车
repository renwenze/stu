/**************************************************************************
函数功能：所有的控制代码都在这里面
         5ms定时中断由MPU6050的INT引脚触发
         严格保证采样和数据处理的时间同步				 
**************************************************************************/
void TIM1_UP_IRQHandler(void)  
{    
	if(TIM1->SR&0X0001)//定时中断
	{   
		  TIM1->SR&=~(1<<0);             //===清除定时器中断标志位	       
		  if(delay_flag==1)
			 {
				 if(++delay_50==10)	 delay_50=0,delay_flag=0;                     //给主函数提供50ms的精准延时
			 }
			 if(++Flag_Target==4)	
			 {
        Encoder_Left=Read_Encoder(2);                                       //===读取编码器的值							 //为了保证M法测速的时间基准，首先读取编码器数据
 		    Encoder_Right=-Read_Encoder(3);                                      //===读取编码器的值
			  Position_Pwm=velocity(Encoder_Left,Encoder_Right);
				Flag_Target=0;
			 }
			Trun_Pwm=turn(); 

      Angle_Balance=Get_Adc_Average(8,15);                     //===更新姿态	
      Balance_Pwm =balance(Angle_Balance);                                          //===角度PD控制	

      Motor_A=Balance_Pwm+Position_Pwm+Trun_Pwm;        //===计算电机最终PWM
			Motor_B=Balance_Pwm+Position_Pwm-Trun_Pwm;        //===计算电机最终PWM
		  Xianfu_Pwm();                         //===PWM限幅 反正占空比100%带来的系统不稳定因素
		 	if(Turn_Off(Voltage)==0)         
			Set_Pwm(Motor_A,Motor_B);   //===赋值给PWM寄存器  
			Key();                                       //===扫描按键状态 单击双击可以改变小车运行状态
			Voltage_Temp=Get_battery_volt();		                                 //=====读取电池电压		
			Voltage_Count++;                                                     //=====平均值计数器
			Voltage_All+=Voltage_Temp;                                           //=====多次采样累积
			if(Voltage_Count==100) Voltage=Voltage_All/100,Voltage_All=0,Voltage_Count=0;//=====求平均值	
			Led_Flash(100);                              //===扫描按键变化
	}		 
} 


/**************************************************************************
函数功能：赋值给PWM寄存器
入口参数：左轮PWM、右轮PWM
返回  值：无
**************************************************************************/
void Set_Pwm(int motor_a,int motor_b)
{
    	if(motor_a<0)			PWMA1=7200,PWMA2=7200+motor_a;
			else 	            PWMA2=7200,PWMA1=7200-motor_a;
		
		  if(motor_b<0)			PWMB1=7200,PWMB2=7200+motor_b;
			else 	            PWMB2=7200,PWMB1=7200-motor_b;
}

/**************************************************************************
函数功能：限制PWM赋值 
入口参数：无
返回  值：无
**************************************************************************/
void Xianfu_Pwm(void)
{	
	  int Amplitude=7200;    //===PWM满幅是7200 最大输出
    if(Motor_A<-Amplitude) Motor_A=-Amplitude;	
		if(Motor_A>Amplitude)  Motor_A=Amplitude;	
	  if(Motor_B<-Amplitude) Motor_B=-Amplitude;	
		if(Motor_B>Amplitude)  Motor_B=Amplitude;		
}
/**************************************************************************
函数功能：按键修改小车运行状态 
入口参数：无
返回  值：无
**************************************************************************/
void Key(void)
{	
	u8 tmp;
	tmp=click_N_Double(50); 
	if(tmp==1)Flag_Stop=!Flag_Stop;//单击控制小车的启停
	if(tmp==2)Flag_Show=!Flag_Show;//双击控制小车的显示状态
	//tmp2=Long_Press();          
  //if(tmp2==1)Flag_Show=!Flag_Show;//控制小车的显示状态
}

/**************************************************************************
函数功能：异常关闭电机
入口参数：电压
返回  值：1：异常  0：正常
**************************************************************************/
u8 Turn_Off( int voltage)
{
	    u8 temp;
			if(Angle_Balance<(ZHONGZHI-500)||Angle_Balance>ZHONGZHI+500||voltage<740||Flag_Stop==1)//电池电压低于7.4V关闭电机
			{	                                                
      temp=1; 
      Motor_A=0;
      Motor_B=0;	
      Flag_Stop=1;
			PWMA1=0;
			PWMA2=0;
			PWMB1=0;
			PWMB2=0;
				
      }
			else
      temp=0;
      return temp;			
}
/**************************************************************************
函数功能：绝对值函数
入口参数：int
返回  值：unsigned int
**************************************************************************/
int myabs(int a)
{ 		   
	  int temp;
		if(a<0)  temp=-a;  
	  else temp=a;
	  return temp;
}
/**************************************************************************
函数功能：倾角PD控制
入口参数：角度
返回  值：倾角控制PWM
**************************************************************************/
int balance(float Angle)
{  
   float Bias;                       //倾角偏差
	 static float Last_Bias,D_Bias;    //PID相关变量
	 int balance;                      //PWM返回值 
	 Bias=Angle-ZHONGZHI;              //求出平衡的角度中值 和机械相关
	 D_Bias=Bias-Last_Bias;            //求出偏差的微分 进行微分控制
	 balance=-Balance_KP*Bias-D_Bias*Balance_KD;   //===计算倾角控制的电机PWM  PD控制
   Last_Bias=Bias;                   //保持上一次的偏差
	 return balance;
}

/**************************************************************************
函数功能：位置PD控制 
入口参数：编码器
返回  值：位置控制PWM
**************************************************************************/
int velocity(int encoder_left,int encoder_right)
{  
    static float Velocity,Encoder_Least,Encoder,Movement;
	  static float Encoder_Integral,Target_Velocity=300;
	  //=============遥控前进后退部分=======================// 
		if(1==Flag_Qian)    	Movement=-Target_Velocity/Flag_Velocity;	         //===前进标志位置1 
	  else if(1==Flag_Hou)	Movement=Target_Velocity/Flag_Velocity;         //===后退标志位置1
	  else  Movement=0;	
   //=============速度PI控制器=======================//	
		Encoder_Least =(encoder_left+encoder_right)-0;                    //===获取最新速度偏差==测量速度（左右编码器之和）-目标速度（此处为零） 
		Encoder *= 0.7;		                                                //===一阶低通滤波器       
		Encoder += Encoder_Least*0.3;	                                    //===一阶低通滤波器    
		Encoder_Integral +=Encoder;                                       //===积分出位移 积分时间：10ms
		Encoder_Integral +=Movement;        
		if(Encoder_Integral>10000)  	Encoder_Integral=10000;             //===积分限幅
		if(Encoder_Integral<-10000)	Encoder_Integral=-10000;              //===积分限幅	
		Velocity=Encoder*Velocity_Kp/10+Encoder_Integral*Velocity_Ki/10;        //===速度控制	
		if(Turn_Off(Voltage)==1)           Encoder_Integral=0;      //===电机关闭后清除积分
	  return Velocity;
}
/**************************************************************************
函数功能：转向控制  修改转向速度，请修改Turn_Amplitude即可
入口参数：左轮编码器、右轮编码器、Z轴陀螺仪
返回  值：转向控制PWM
**************************************************************************/
int turn(void)//转向控制
{
    static float Turn_Target,Turn,Turn_Convert=2,Bias_Intergral,kp=40,ki=2;
	  float Turn_Amplitude=150/Flag_Velocity,Bias;    
	  //=============遥控左右旋转部分=======================//		
		if(1==Flag_Left)	           Turn_Target-=Turn_Convert;        //===接收转向遥控数据
		else if(1==Flag_Right)	     Turn_Target+=Turn_Convert;        //===接收转向遥控数据
		else Turn_Target=0;                                            //===接收转向遥控数据
    if(Turn_Target>Turn_Amplitude)  Turn_Target=Turn_Amplitude;    //===转向速度限幅
	  if(Turn_Target<-Turn_Amplitude) Turn_Target=-Turn_Amplitude;   //===转向速度限幅     
   	Bias=Encoder_Left-Encoder_Right;
	  Bias_Intergral+=Bias;
	  if(Bias_Intergral>5000)  	Bias_Intergral=5000;             //===积分限幅
		if(Bias_Intergral<-5000)	Bias_Intergral=-5000;              //===积分限幅	
		if(Turn_Off(Voltage)==1)           Bias_Intergral=0;      //===电机关闭后清除积分
  	//=============转向PID控制器=======================//
		  if(Flag_Left==1||Flag_Right==1)Turn=Turn_Target*10,Bias_Intergral=0;
	   else		Turn=-Bias*kp-Bias_Intergral*ki+Turn_Target*10;   //===进行PD控制

	  return Turn;
}
